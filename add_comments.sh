#!/bin/bash

# üîß SKRYPT DODAWANIA KOMENTARZY DO PRZYK≈ÅAD√ìW CDK
# Ten skrypt automatycznie dodaje szczeg√≥≈Çowe komentarze do wybranych przyk≈Çad√≥w

echo "üéØ DODAWANIE KOMENTARZY DO PRZYK≈ÅAD√ìW AWS CDK"
echo "============================================"

# Sprawdzenie czy jeste≈õ w odpowiednim katalogu
if [ ! -d "typescript" ]; then
    echo "‚ùå B≈ÇƒÖd: Nie znaleziono katalogu 'typescript'"
    echo "Przejd≈∫ do katalogu aws-cdk-examples"
    exit 1
fi

cd typescript

# Lista przyk≈Çad√≥w do przetworzenia (od prostych do zaawansowanych)
EXAMPLES=(
    "static-site-basic"
    "lambda-cron" 
    "ec2-instance"
    "application-load-balancer"
    "appsync-graphql-dynamodb"
    "ecs"
    "eventbridge-lambda"
    "stepfunctions-job-poller"
)

# Funkcja dodajƒÖca nag≈Ç√≥wek z komentarzami do pliku
add_header_comments() {
    local file=$1
    local description=$2
    
    # Sprawd≈∫ czy plik ju≈º ma komentarze
    if head -5 "$file" | grep -q "============================================================================"; then
        echo "  ‚è≠Ô∏è  Plik ju≈º ma komentarze: $file"
        return
    fi
    
    # Utw√≥rz tymczasowy plik z komentarzami
    cat > /tmp/header_comment.txt << EOF
// ============================================================================
// $description
// ============================================================================
// Ten plik zosta≈Ç automatycznie okomentowany dla ≈Çatwiejszego zrozumienia
// Dodano: $(date '+%Y-%m-%d %H:%M:%S')
// ============================================================================

EOF
    
    # Dodaj komentarze na poczƒÖtku pliku
    cat /tmp/header_comment.txt "$file" > /tmp/commented_file.txt
    mv /tmp/commented_file.txt "$file"
    
    echo "  ‚úÖ Dodano komentarze do: $file"
}

# Funkcja analizujƒÖca i komentujƒÖca konkretny przyk≈Çad
process_example() {
    local example_dir=$1
    
    if [ ! -d "$example_dir" ]; then
        echo "‚è≠Ô∏è  Pomijam (nie istnieje): $example_dir"
        return
    fi
    
    echo ""
    echo "üìÅ Przetwarzam przyk≈Çad: $example_dir"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    
    cd "$example_dir"
    
    # Dodaj komentarze do g≈Ç√≥wnego pliku CDK
    if [ -f "index.ts" ]; then
        add_header_comments "index.ts" "G≈Å√ìWNY PLIK INFRASTRUKTURY CDK - $example_dir"
    fi
    
    if [ -d "bin" ]; then
        for bin_file in bin/*.ts; do
            if [ -f "$bin_file" ]; then
                add_header_comments "$bin_file" "PUNKT WEJ≈öCIA APLIKACJI CDK - $example_dir"
            fi
        done
    fi
    
    if [ -d "lib" ]; then
        for lib_file in lib/*.ts; do
            if [ -f "$lib_file" ]; then
                add_header_comments "$lib_file" "BIBLIOTEKA KONSTRUKCJI CDK - $example_dir"
            fi
        done
    fi
    
    # Dodaj komentarze do funkcji Lambda
    if [ -d "lambda" ] || [ -d "lambdas" ] || [ -d "src" ]; then
        lambda_dirs=("lambda" "lambdas" "src")
        for lambda_dir in "${lambda_dirs[@]}"; do
            if [ -d "$lambda_dir" ]; then
                for lambda_file in "$lambda_dir"/*.ts "$lambda_dir"/*.js; do
                    if [ -f "$lambda_file" ]; then
                        add_header_comments "$lambda_file" "FUNKCJA LAMBDA - $example_dir"
                    fi
                done
            fi
        done
    fi
    
    # Utw√≥rz plik README z analizƒÖ (je≈õli nie istnieje)
    if [ ! -f "ANALIZA_KODU.md" ]; then
        cat > ANALIZA_KODU.md << EOF
# üìä ANALIZA PRZYK≈ÅADU: $example_dir

## üéØ Cel przyk≈Çadu
$(if [ -f README.md ]; then head -5 README.md | tail -3; else echo "Brak opisu - sprawd≈∫ README.md"; fi)

## üèóÔ∏è Architektura
- **G≈Ç√≥wny plik**: $(if [ -f index.ts ]; then echo "index.ts"; elif [ -d bin ]; then echo "bin/*.ts"; else echo "lib/*.ts"; fi)
- **Serwisy AWS**: $(if [ -f index.ts ]; then grep -o "aws-cdk-lib/aws-[a-z-]*" index.ts 2>/dev/null | sed 's/aws-cdk-lib\/aws-//' | sort | uniq | head -5 | tr '\n' ', '; fi)

## üìÅ Struktura plik√≥w
\`\`\`
$(find . -name "*.ts" -o -name "*.js" -o -name "*.json" | grep -E '\.(ts|js|json)$' | head -10)
\`\`\`

## üîÑ Przep≈Çyw wykonania
1. **Deploy**: \`cdk deploy\`
2. **G≈Ç√≥wne komponenty**:
$(if [ -f index.ts ]; then grep "new [A-Z][a-zA-Z]*(" index.ts 2>/dev/null | sed 's/.*new /   - /' | sed 's/(.*$//' | head -5; fi)

## üöÄ Jak uruchomiƒá
\`\`\`bash
cd typescript/$example_dir
npm install
npm run build
cdk synth    # Zobacz wygenerowany CloudFormation
cdk deploy   # Deploy do AWS
cdk destroy  # Usu≈Ñ zasoby
\`\`\`

## üîç Kluczowe wzorce
- **Infrastructure as Code**: Definicja infrastruktury w TypeScript
- **AWS CDK**: Wysokopoziomowe konstrukty zamiast surowego CloudFormation
- **Best Practices**: $(if grep -q "RemovalPolicy" index.ts 2>/dev/null; then echo "Polityki usuwania zasob√≥w"; fi)

## üí° Czego siƒô nauczysz
- Jak u≈ºywaƒá CDK do tworzenia infrastruktury AWS
- Wzorce projektowe dla cloud applications
- Integracja r√≥≈ºnych serwis√≥w AWS
- Najlepsze praktyki bezpiecze≈Ñstwa i wydajno≈õci

---
*Plik wygenerowany automatycznie: $(date)*
EOF
        echo "  üìÑ Utworzono ANALIZA_KODU.md"
    fi
    
    cd ..
}

# Menu g≈Ç√≥wne
show_menu() {
    echo ""
    echo "Co chcesz zrobiƒá?"
    echo "1. Dodaj komentarze do wszystkich podstawowych przyk≈Çad√≥w"
    echo "2. Dodaj komentarze do konkretnego przyk≈Çadu" 
    echo "3. Poka≈º listƒô przyk≈Çad√≥w do przetworzenia"
    echo "4. Analizuj przyk≈Çad bez dodawania komentarzy"
    echo "5. Wyj≈õcie"
    echo ""
    read -p "Wybierz opcjƒô (1-5): " choice
    
    case $choice in
        1)
            echo ""
            echo "üîÑ Przetwarzam podstawowe przyk≈Çady..."
            for example in "${EXAMPLES[@]}"; do
                process_example "$example"
            done
            echo ""
            echo "‚úÖ Zako≈Ñczono dodawanie komentarzy!"
            ;;
        2)
            echo ""
            echo "Dostƒôpne przyk≈Çady:"
            ls -d */ | sed 's|/||' | nl
            echo ""
            read -p "Podaj nazwƒô przyk≈Çadu: " example_name
            if [ -d "$example_name" ]; then
                process_example "$example_name"
            else
                echo "‚ùå Nie znaleziono przyk≈Çadu: $example_name"
            fi
            ;;
        3)
            echo ""
            echo "üìã PRZYK≈ÅADY DO PRZETWORZENIA:"
            echo "============================="
            for example in "${EXAMPLES[@]}"; do
                if [ -d "$example" ]; then
                    echo "  ‚úÖ $example"
                else
                    echo "  ‚ùå $example (nie istnieje)"
                fi
            done
            ;;
        4)
            echo ""
            read -p "Podaj nazwƒô przyk≈Çadu do analizy: " example_name
            if [ -d "$example_name" ]; then
                echo ""
                echo "üìä ANALIZA: $example_name"
                echo "======================"
                cd "$example_name"
                
                echo "üìÅ Struktura:"
                find . -name "*.ts" -o -name "*.js" -o -name "*.json" | head -10
                echo ""
                
                echo "‚ö° Serwisy AWS:"
                if [ -f "index.ts" ]; then
                    grep -o "aws-cdk-lib/aws-[a-z-]*" index.ts 2>/dev/null | sed 's/aws-cdk-lib\/aws-//' | sort | uniq | head -5
                fi
                echo ""
                
                echo "üèóÔ∏è G≈Ç√≥wne konstrukty:"
                if [ -f "index.ts" ]; then
                    grep "new [A-Z][a-zA-Z]*(" index.ts 2>/dev/null | sed 's/.*new //' | sed 's/(.*$//' | sort | uniq | head -5
                fi
                
                cd ..
            else
                echo "‚ùå Nie znaleziono przyk≈Çadu: $example_name"
            fi
            ;;
        5)
            echo "üëã Do zobaczenia!"
            exit 0
            ;;
        *)
            echo "‚ùå Nieprawid≈Çowa opcja"
            ;;
    esac
}

# G≈Ç√≥wna pƒôtla
while true; do
    show_menu
    echo ""
    read -p "Naci≈õnij Enter aby kontynuowaƒá..."
    clear
done
